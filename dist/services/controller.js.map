{"version":3,"sources":["../../services/controller.js"],"names":["cron","schedule","lastWeek","Date","getTime","getWeeklyPlaylist","toISOString","thisMonth","getMonth","lastMonth","setMonth","date","getMonthlyPlaylistForUser","userProcessing","allUsers","type","userPlaylists","user","push","Promise","all","logger","error","message","playlistCreationController","then","playlists","err","getAllTimePlaylist","doAll"],"mappings":"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","sourcesContent":["import { getMoviesFromDatabase } from \"./movieDbService\";\nimport { getPlaylist } from \"./playlistGenerator\";\nimport cron from 'node-cron';\nimport { logger } from \"../helpers/logger\";\n\ncron.schedule('0 0 0 * * 0', () => {\n    const lastWeek = new Date().getTime() - (86400000 * 7);\n    getWeeklyPlaylist(new Date(lastWeek).toISOString());\n});\n\ncron.schedule('0 0 0 1 * *', () => {\n    const thisMonth = new Date().getMonth();\n    const lastMonth = (thisMonth == 0) ? new Date().setMonth(11) : new Date().setMonth(thisMonth - 1);\n    const date = new Date(lastMonth).toISOString();\n    getMonthlyPlaylistForUser(date);\n});\n\nasync function userProcessing(allUsers, date, type) {\n    try {\n        const userPlaylists = [];\n        for (const user of allUsers) {\n            userPlaylists.push(getPlaylist(user, date, type));\n        }\n        return Promise.all(userPlaylists);\n    } catch (err) {\n        logger.error(`Failed to process users: ${err.message}`);\n        throw err;\n    }\n\n}\nasync function playlistCreationController(type, date) {\n    return (\n        getMoviesFromDatabase()\n            .then((allUsers) => userProcessing(allUsers, date, type))\n            .then((playlists) => playlists)\n            .catch((err) => {\n                logger.error(`Failed to get weekly playlists: ${err.message}`);\n                throw err;\n            }));\n}\n\nexport async function getWeeklyPlaylist() {\n    let lastWeek = new Date().getTime() - (86400000 * 7);\n    return await playlistCreationController(0, new Date(lastWeek).toISOString())\n        .then((playlists) => playlists)\n        .catch((err) => {\n            logger.error(`Failed to get playlists: ${err.message}`);\n        });\n}\n\nexport async function getMonthlyPlaylistForUser() {\n    let date = new Date();\n    date = date.setMonth(date.getMonth() - 1);\n    return playlistCreationController(1, new Date(date).toISOString())\n        .then((playlists) => playlists)\n        .catch((err) => {\n            logger.error(`Failed to get playlists: ${err.message}`);\n            throw err;\n        });\n}\n\nexport async function getAllTimePlaylist() {\n    return await playlistCreationController(2, null)\n        .then((playlists) => playlists)\n        .catch((err) => {\n            logger.error(`Failed to get playlists: ${err.message}`);\n        });\n}\nexport async function doAll() {\n    await getMonthlyPlaylistForUser();\n    await getAllTimePlaylist();\n    await getWeeklyPlaylist();\n    return true\n}"],"file":"controller.js"}