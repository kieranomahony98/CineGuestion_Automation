{"version":3,"sources":["../../services/movieDbService.js"],"names":["getMoviesFromDatabase","MovieSchema","find","then","users","logger","error","writeToDB","id","results","type","playlist","updateOne","_id","$set","user","err","message"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;AAEA;AACA;AACA;AACA;SACsBA,qB;;;;;mFAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEcC,uBAAYC,IAAZ,CAAiB,EAAjB,EACRC,IADQ,CACH,UAACC,KAAD;AAAA,qBAAWA,KAAX;AAAA,aADG,CAFd;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAKCC,2BAAOC,KAAP;;AALD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAUeC,S;;;;;uEAAf,kBAAyBC,EAAzB,EAA6BC,OAA7B,EAAsCC,IAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,YAAAA,QADH,GACeD,IAAI,KAAK,CAAV,GAAe,+BAAf,GAAkDA,IAAI,KAAK,CAAV,GAAe,gCAAf,GAAkD,gCADjH;AAAA;AAAA,mBAGUT,uBAAYW,SAAZ,CAAsB;AAAEC,cAAAA,GAAG,EAAEL;AAAP,aAAtB,EAAmC;AAAEM,cAAAA,IAAI,sBAAKH,QAAL,EAAgBF,OAAhB;AAAN,aAAnC,EACRN,IADQ,CACH,UAACY,IAAD;AAAA,qBAAU,IAAV;AAAA,aADG,WAEF,UAACC,GAAD,EAAS;AACZX,6BAAOC,KAAP,wCAA6CU,GAAG,CAACC,OAAjD;;AACA,oBAAMD,GAAN;AACH,aALQ,CAHV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { remove } from 'winston';\nimport { logger } from '../helpers/logger';\nimport MovieSchema from '../mongoModels/movieModel';\n\n/**\n * get movie curation for a user\n * @param {String} userId\n */\nexport async function getMoviesFromDatabase() {\n    try {\n        return await MovieSchema.find({})\n            .then((users) => users);\n    } catch (err) {\n        logger.error(`failed to retrieve user movies for automation`);\n        throw err;\n    }\n}\n\nexport async function writeToDB(id, results, type) {\n    const playlist = (type === 0) ? 'userPlaylists.weeklyPlaylists' : (type === 1) ? 'userPlaylists.monthlyPlaylists' : 'userPlaylists.allTimePlaylists';\n\n    return await MovieSchema.updateOne({ _id: id }, { $set: { [playlist]: results } })\n        .then((user) => true)\n        .catch((err) => {\n            logger.error(`Failed to write to database: ${err.message}`);\n            throw err;\n        });\n}\n"],"file":"movieDbService.js"}