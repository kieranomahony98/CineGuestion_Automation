{"version":3,"sources":["../../services/playlistGenerator.js"],"names":["filterMovies","movies","date","leaderBoard","with_genres","with_keywords","sort_by","moviesThisWeek","filter","movieGeneration","movieGenerationDate","movieSearchCriteria","generation","Object","entries","key","value","undefined","hasOwnProperty","values","split","logger","error","count","length","normiliseData","characteristic","message","compareData","comparedData","k","k2","v","v2","createQuery","queryObj","mostPopularGenre","matchedGenres","c","revisedQuery","keywordsList","splice","toString","makeRequest","movieDb","discoverMovie","then","results","movie","index","err","filterRequest","movieResults","filterResults","Promise","all","map","genre_ids","genres","movieId","id","movieTitle","title","movieDescription","overview","movieReleaseYear","release_date","movieGenres","moviePopularity","vote_average","movieImagePath","poster_path","movieRetun","Date","toISOString","getPlaylist","user","lastWeek","type","_id","userMovies","leaderboardObj","leaderboard","sortedData","sortedMovies","moviesWritten"],"mappings":"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","sourcesContent":["import { matchedGenres, listMatcher } from '../helpers/genres';\nimport { logger } from '../helpers/logger';\nimport movieDb from './tmdbController';\nimport { writeToDB } from './movieDbService';\nasync function filterMovies(movies, date) {\n    const leaderBoard = {\n        with_genres: {},\n        with_keywords: {},\n        sort_by: {}\n    };\n\n    const moviesThisWeek = (!date) ? movies : movies.filter((movieGeneration) => {\n        if (movieGeneration.movieGenerationDate >= date) {\n            return movieGeneration.movieSearchCriteria;\n        }\n    });\n\n\n    try {\n        for (const generation of moviesThisWeek) {\n            for (const [key, value] of Object.entries(generation.movieSearchCriteria)) {\n                if (value !== undefined && value != \"\" && (leaderBoard.hasOwnProperty(key))) {\n                    const values = (key === 'with_genres' || key === 'with_keywords') ? (generation.movieSearchCriteria[key].split(\",\")) : [value];\n                    for (const value of values) {\n                        leaderBoard[key][value] = (leaderBoard[key][value]) ? leaderBoard[key][value] + 1 : 1;\n                    }\n                }\n            }\n        }\n    } catch (err) {\n        logger.error(`failed to filter movies: ${err}`);\n        throw err;\n    }\n    return {\n        leaderBoard,\n        count: moviesThisWeek.length\n    };\n}\n\nasync function normiliseData({ leaderBoard, count }) {\n    try {\n        for (const characteristic in leaderBoard) {\n            for (const value in leaderBoard[characteristic]) {\n                leaderBoard[characteristic][value] = leaderBoard[characteristic][value] / count;\n            }\n        }\n        return leaderBoard;\n    } catch (err) {\n        logger.error(`Failed to normalise data: ${err.message}`);\n        throw err;\n    }\n}\n\nasync function compareData(leaderBoard) {\n    const comparedData = {\n        with_genres: {\n            k: null,\n            k2: null,\n            v: 0,\n            v2: 0\n        },\n        with_keywords: {\n            k: null,\n            v: 0,\n        },\n        sort_by: {\n            k: null,\n            v: 0,\n        },\n    }\n    for (const [key, value] of Object.entries(leaderBoard)) {\n        try {\n            if (leaderBoard.hasOwnProperty(key)) {\n                for (const [k, v] of Object.entries(leaderBoard[key])) {\n                    if (key === 'with_genres') {\n                        if (v > comparedData[key].v) {\n                            comparedData[key].k = k;\n                            comparedData[key].v = v;\n                        } else {\n                            if (v > comparedData[key].v2) {\n                                comparedData[key].k2 = k;\n                                comparedData[key].v2 = v;\n                            }\n                        }\n                    } else {\n                        if (v > comparedData[key].v) {\n                            comparedData[key].k = k;\n                            comparedData[key].v = v;\n                        }\n                    }\n                    continue;\n                }\n            }\n        } catch (err) {\n            logger.error(`Failed to compare data: ${err.message}`);\n            throw err;\n        }\n    }\n    return comparedData;\n}\n\nasync function createQuery({ with_genres, with_keywords, sort_by }) {\n    try {\n        const queryObj = {\n            with_genres: (with_genres.k) ? with_genres.k : null,\n            with_keywords: with_keywords.k,\n            sort_by: sort_by.k,\n        };\n\n        const mostPopularGenre = (with_genres.k2) ? with_genres.k2 : with_genres.k ? k : null;\n        if (mostPopularGenre) {\n            for (const c of matchedGenres[mostPopularGenre]) {\n                if (mostPopularGenre !== c) {\n                    queryObj.with_genres = (with_genres) ? `${queryObj.with_genres},${c}` : null;\n                    break;\n                }\n            }\n        }\n\n        for (const [key, value] in Object.entries(queryObj)) {\n            if (!value) {\n                delete queryObj[key];\n            }\n        }\n        return queryObj;\n    } catch (err) {\n        logger.error(`Failed to create query: ${err.message}`);\n        throw err;\n    }\n}\nasync function revisedQuery({ with_genres, with_keywords, sort_by }) {\n    if (with_keywords.split(\",\").length > 1) {\n        const keywordsList = with_keywords.split(\",\");\n        keywordsList.splice(-1, 1);\n        return {\n            with_genres,\n            sort_by,\n            with_keywords: keywordsList.toString()\n        }\n    }\n    if (sort_by) {\n        return {\n            with_genres\n        }\n    }\n}\n\nasync function makeRequest(queryObj) {\n    return await movieDb.discoverMovie(queryObj)\n        .then((movies) => {\n            if (movies.results) {\n                return movies.results.filter((movie, index) => {\n                    return index <= 8;\n                });\n            }\n        }).catch((err) => {\n            logger.error(`Failed to make request: ${err.message}`);\n            throw err;\n        });\n}\n\n\n\nasync function filterRequest(queryObj) {\n    const movieResults = await makeRequest(queryObj)\n        .then((movies) => {\n            if (!movies) {\n                return null;\n            }\n            return movies\n        }).catch(err => {\n            logger.error(`Failed to make request: ${err.message}`);\n            throw err;\n        });\n    try {\n        if (!movieResults) {\n            return await filterRequest(await revisedQuery(queryObj));\n        }\n        return {\n            movieResults,\n            queryObj\n        }\n    } catch (err) {\n        logger.error(`Failed to filter request: ${err.message}`);\n        throw err;\n    }\n\n}\n\nasync function filterResults({ movieResults, queryObj }) {\n    try {\n        for (const [key, value] in Object.entries(queryObj)) {\n            if (!value) {\n                delete queryObj[key];\n            }\n        }\n\n        const movieRetun = await Promise.all(movieResults.map(async (movie) => {\n            const genres = await listMatcher(movie.genre_ids);\n            return ({\n                movieId: movie.id,\n                movieTitle: movie.title,\n                movieDescription: movie.overview,\n                movieReleaseYear: (movie.release_date) ? movie.release_date.split('-')[0] : undefined,\n                movieGenres: genres,\n                moviePopularity: movie.vote_average ? `${movie.vote_average * 10}%` : 'This movie has no votes',\n                movieImagePath: movie.poster_path\n            })\n        }));\n\n        return {\n            movieGenerationDate: new Date().toISOString(),\n            movieSearchCriteria: queryObj,\n            movies: movieRetun\n        };\n    } catch (err) {\n        logger.error(`Failed to format movies ${err}`);\n        throw err;\n    }\n}\n\n\nexport async function getPlaylist(user, lastWeek, type) {\n    const id = user._id;\n    return (\n        filterMovies(user.userMovies, lastWeek)\n            .then((leaderboardObj) => normiliseData(leaderboardObj))\n            .then((leaderboard) => compareData(leaderboard))\n            .then((sortedData) => createQuery(sortedData))\n            .then((queryObj) => filterRequest(queryObj))\n            .then((results) => filterResults(results))\n            .then((sortedMovies) => writeToDB(id, sortedMovies, type))\n            .then((moviesWritten) => moviesWritten)\n            .catch(err => {\n                logger.error(err.message);\n                throw err;\n            }));\n}\n\n\n\n"],"file":"playlistGenerator.js"}